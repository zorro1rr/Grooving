{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/Preview/Preview.js","Components/Playlists2/Playlists2.js","Components/PlaylistTracks/PlaylistTracks.js","Components/Playlists/Playlists.js","Components/Logout/Logout.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","handleKeyPress","event","key","search","bind","handleTermChange","this","onSearch","state","term","setState","target","value","className","onKeyPress","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","preview","onAdd","track","onRemove","isRemoval","id","name","artist","album","renderAction","TrackList","tracks","map","previewUrl","SearchResults","dis","playlists","document","querySelector","app","heading","playlist","searchbar","parentNode","style","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","process","logout","spotifyLogoutWindow","open","close","reload","fetch","headers","Authorization","response","json","jsonResponse","items","artists","uri","previewTrack","console","log","preview_url","getPlaylists","userData","userId","playlistsData","playlistNames","playlistArr","urls","Id","push","Promise","all","url","a","tracklist","forEach","trackArr","filteredTracks","filter","savePlaylist","trackUris","length","method","body","JSON","stringify","response_1","jsonResponse_1","playlistId","uris","deletePlaylist","Preview","Playlists2","showDelete","goBack","delete","previousSibling","nextSibling","i","PlaylistTracks","Playlists","disPlay","loadPlaylists","searchresults","Logout","App","playlistName","updatePlaylistName","loadPlaylist","forgetPlaylist","searchTracks","find","savedTrack","index","indexOf","splice","unshift","currentTrack","then","trackId","previewDiv","innerHTML","searchTerm","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cbd3b7ce.chunk.js","sourcesContent":["//variables for client ID and redirect URI\r\nconst clientId = process.env.REACT_APP_CLIENTID;\r\nconst redirectUri = \"https://zorro1rr.github.io/grooving/\";\r\n// const redirectUri = \"http://localhost:3000\";\r\n//variable that will hold user's access token\r\nlet accessToken;\r\n\r\n//Spotify module\r\nconst Spotify = {\r\n  //method to get user's access token\r\n  getAccessToken() {\r\n    //check if there is an accessToken defined, if so return it's value\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n    //if not already set check the URL to see if it has just been obtained\r\n    //window.location.href checks the current url and .match() with Regex to check for the token\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    //now use same object/method (different regex) to get the experation time\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    //now check if accessTokenMatch and expiresInMatch are in url\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      //set the value of accessToken\r\n      accessToken = accessTokenMatch[1];\r\n      //make variable for the expiration time\r\n      let expiresIn = Number(expiresInMatch[1]);\r\n      //Clear the parameters so we can grab a new access token when it expires\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n      return accessToken;\r\n      //if you still don't have the accessToken redirect users with window.location\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n  //method for logout\r\n  logout() {\r\n    const url = \"https://www.spotify.com/logout/\";\r\n    const spotifyLogoutWindow = window.open(\r\n      url,\r\n      \"Spotify Logout\",\r\n      \"width=700,height=500,top=40,left=40\"\r\n    );\r\n    setTimeout(() => {\r\n      spotifyLogoutWindow.close();\r\n      window.location.reload();\r\n    }, 1200);\r\n  },\r\n  //method accepting search term input, passes search term value to a Spotify request\r\n  //and returns the response as a list of tracks in JSON format\r\n  async search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    //start promise chain be returning GET request using fetch()\r\n    const response = await fetch(\r\n      `https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n      //convert the response to JSON\r\n    );\r\n    const jsonResponse = await response.json();\r\n    //make sure that some tracks actually exist\r\n    if (!jsonResponse.tracks) {\r\n      return [];\r\n    }\r\n    // return a mapped array with a list of track objects to pass to states in App.js\r\n    return jsonResponse.tracks.items.map((track) => ({\r\n      id: track.id,\r\n      name: track.name,\r\n      artist: track.artists[0].name,\r\n      album: track.album.name,\r\n      uri: track.uri,\r\n    }));\r\n  },\r\n\r\n  async previewTrack(track) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    //start promise chain be returning GET request using fetch()\r\n    const response = await fetch(\r\n      `https://api.spotify.com/v1/tracks/${track}?market=US`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n      //convert the response to JSON\r\n    );\r\n    const jsonResponse = await response.json();\r\n    //make sure that some tracks actually exist\r\n    console.log(jsonResponse.preview_url);\r\n    return jsonResponse.preview_url;\r\n  },\r\n\r\n  async getPlaylists() {\r\n    // variables: for current user's access token (grabbed from the method above)\r\n    const accessToken = Spotify.getAccessToken();\r\n    // for Authorization parameter in implicit grant flow request format\r\n    const headers = {\r\n      Authorization: `Bearer ${accessToken}`,\r\n    };\r\n    // empty variable for user's ID\r\n    const userData = await fetch(\r\n      `https://api.spotify.com/v1/me`,\r\n      {\r\n        headers: headers,\r\n      }\r\n      // convert response to JSON\r\n    );\r\n    const { id: userId } = await userData.json();\r\n    const playlistsData = await fetch(\r\n      `https://api.spotify.com/v1/users/${userId}/playlists`,\r\n      {\r\n        headers: headers,\r\n      }\r\n    );\r\n    const playlists = await playlistsData.json();\r\n\r\n    if (!playlists.items) {\r\n      console.log(\"no saved playlists\");\r\n      return;\r\n    }\r\n    //variables to push playlist names and tracklists to\r\n    let playlistNames = [];\r\n    let playlistTracks = [];\r\n    //  let playlistObject = {};\r\n    let playlistArr = [];\r\n    //grab playlist hrefs, ids, names\r\n    const urls = playlists.items.map((playlist) => {\r\n      const playlistArr = [];\r\n      const Id = playlist.id;\r\n      const name = playlist.name;\r\n      const href = playlist.tracks.href;\r\n      playlistArr.push(name, Id, href);\r\n      playlistNames.push(playlistArr);\r\n      return playlist.tracks.href;\r\n    });\r\n\r\n    //fetch each  playlist href\r\n    await Promise.all(\r\n      urls.map(async (url) => {\r\n        const response = await fetch(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${accessToken}`,\r\n          },\r\n        });\r\n        //pushing tracks and track href to match if playlist name\r\n        let tracks = [];\r\n        const jsonResponse = await response.json();\r\n        const tracklist = jsonResponse.items.map((track) => {\r\n          return track.track.name;\r\n        });\r\n        tracks.push(response.url, tracklist);\r\n        playlistTracks.push(tracks);\r\n      })\r\n    );\r\n\r\n    //because the promises are returning at different times we match up the hrefs or the names and the tracks\r\n    //and push them into a single array\r\n    playlistNames.forEach((playlist) => {\r\n      let trackArr = [];\r\n      const href = playlist[2];\r\n      const filteredTracks = playlistTracks.filter(\r\n        (tracks) => tracks[0] === href\r\n      );\r\n      trackArr.push(playlist, filteredTracks[0][1]);\r\n      playlistArr.push(trackArr);\r\n    });\r\n\r\n    // for (let i = 0; i < playlistNames.length; i++) {\r\n    //   let playlistAr = [];\r\n    //   playlistAr.push(playlistNames[i], playlistTracks[i]);\r\n    //   playlistArr.push(playlistAr);\r\n    // }\r\n    // console.log('playlist Object made from names and tracks, to be returned to App.js', playlistObject);\r\n    // return  playlistObject;\r\n    // console.log('playlistArr', playlistArr)\r\n    return playlistArr;\r\n  },\r\n\r\n  //method that writes the learner's custom playlight in this app to their Spotify account\r\n  async savePlaylist(name, trackUris) {\r\n    //first make sure name and trackuris actually have values saved to them\r\n    if (!name || !trackUris.length) return;\r\n    //variables: for current user's access token (grabbed from the method above)\r\n    const accessToken = Spotify.getAccessToken();\r\n    //for Authorization parameter in implicit grant flow request format\r\n    const headers = {\r\n      Authorization: `Bearer ${accessToken}`,\r\n    };\r\n    //empty variable for user's ID\r\n    let userId;\r\n    //make request that returns user's Spotify username\r\n    const response = await fetch(\r\n      `https://api.spotify.com/v1/me`,\r\n      {\r\n        headers: headers,\r\n      }\r\n      //convert response to JSON\r\n    );\r\n    const jsonResponse = await response.json();\r\n    userId = jsonResponse.id;\r\n    const response_1 = await fetch(\r\n      `https://api.spotify.com/v1/users/${userId}/playlists`,\r\n      {\r\n        headers: headers,\r\n        method: \"POST\",\r\n        //key value for name is one of the parameters for this method\r\n        body: JSON.stringify({\r\n          name: name,\r\n        }),\r\n      }\r\n    );\r\n    const jsonResponse_1 = await response_1.json();\r\n    //get the playlist with the response id\r\n    const playlistId = jsonResponse_1.id;\r\n    return fetch(\r\n      `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n      {\r\n        headers: headers,\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          uris: trackUris,\r\n        }),\r\n      }\r\n    );\r\n  },\r\n\r\n  deletePlaylist(playlist) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = {\r\n      Authorization: `Bearer ${accessToken}`,\r\n    };\r\n    return fetch(`https://api.spotify.com/v1/playlists/${playlist}/followers`, {\r\n      headers: headers,\r\n      method: \"DELETE\",\r\n    });\r\n  },\r\n};\r\n\r\nexport default Spotify;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  //method that passes the state of term to onSearch passed down from App.js\r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  //method that sets the state of search bar's term to event target's value\r\n  handleTermChange(event) {\r\n    this.setState({ term: event.target.value });\r\n  }\r\n\r\n  //Event handler so they can submit searches by pressing enter as well as clicking button\r\n  handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      this.search();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input\r\n          onKeyPress={this.handleKeyPress}\r\n          onChange={this.handleTermChange}\r\n          placeholder=\"Enter A Song, Album, or Artist\"\r\n        />\r\n        <button className=\"SearchButton\" onClick={this.search}>\r\n          SEARCH\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n        this.preview = this.preview.bind(this);\r\n    }\r\n\r\n    addTrack(){\r\n        //use the onAdd method we passed down thats checks and adds song and pass the track into it\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        //use onRemove method passed all the way down from App.js and pass track into it\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    preview(){\r\n        this.props.preview(this.props.track)\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return (\r\n                <>\r\n                <button className=\"Track-action\" id=\"plus\" onClick={this.addTrack}>+</button>\r\n                <button className=\"Track-action\" onClick={this.preview}>&#10148;</button>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    {/* use props to render the names, artists and albums \r\n                    from App->SearchResults->TrackList */}\r\n                    <h3>{this.props.track.name}</h3>\r\n        <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from \"react\";\r\nimport \"./TrackList.css\";\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      //Pass results of SearchResults in SearchResults.js to this component with this.props}\r\n      <div className=\"TrackList\">\r\n        {\r\n          //loop through the SearchResults Array's objests we set in App.js and set the keys\r\n          this.props.tracks.map((track) => {\r\n            //for each object in the SearchResults Array return a seperate track component\r\n            //the attribute value {track} will provide the entire object with the name, artist, album, id\r\n            return (\r\n              <Track\r\n                track={track}\r\n                key={track.id}\r\n                previewUrl={this.props.previewUrl}\r\n                //pass onAdd from here to Track, onRemove, isRemoval and preview to track.js\r\n                onAdd={this.props.onAdd}\r\n                onRemove={this.props.onRemove}\r\n                isRemoval={this.props.isRemoval}\r\n                preview={this.props.preview}\r\n              />\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass SearchResults extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.dis = this.dis.bind(this);\r\n  }\r\n\r\n  //make button so we can swap the search results and the playlists in smaller displays\r\n  dis(event) {\r\n    const playlists = document.querySelector(\".playlist\");\r\n    const app = document.querySelector(\".App\");\r\n    const heading = document.querySelector(\"h1\");\r\n    const playlist = document.querySelector(\".Playlist1\");\r\n    const searchbar = document.querySelector(\".SearchBar\");\r\n    event.target.parentNode.style = \"display: none;\";\r\n    playlists.style = \"display: initial; width: 25%\";\r\n    app.style = \"padding-left: 30%\";\r\n    heading.style = \"left: -7%\";\r\n    playlist.style = \"margin-left: 3%; margin-right: 3%;\";\r\n    searchbar.style = \"margin-top: 60%;\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"SearchResults\">\r\n          <button className=\"disButton\" onClick={this.dis}>\r\n            Show Playlists\r\n          </button>\r\n          <h2>Results</h2>\r\n          <TrackList\r\n            //keep passing the searchResults state down through props\r\n            tracks={this.props.searchResults}\r\n            previewUrl={this.props.previewUrl}\r\n            //pass onAdd and preview from SearchResults to Tracklist\r\n            onAdd={this.props.onAdd}\r\n            preview={this.props.preview}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\nimport \"./Playlist.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  //set up method triggered by onNameChange attribute passed down from App.js\r\n  handleNameChange(event) {\r\n    //call the OnNameChange method with value of the event target for an argument\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist1\">\r\n        <input\r\n          defaultValue={\"New Playlist\"}\r\n          //attach the handleNameChange method to input to get it's value\r\n          onChange={this.handleNameChange}\r\n        />\r\n        {/* pass the stated playlistTracks object and the on Remove method from App.js */}\r\n        <TrackList\r\n          tracks={this.props.playlistTracks}\r\n          isRemoval={true}\r\n          onRemove={this.props.onRemove}\r\n        />\r\n        {/* attach the passed down savePlaylist method with event listener attribute */}\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\r\n          SAVE TO SPOTIFY\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","import React from \"react\";\r\nimport \"./Preview.css\";\r\n\r\nclass Preview extends React.Component {\r\n  render() {\r\n    return <div className=\"preview\"></div>;\r\n  }\r\n}\r\n\r\nexport default Preview;\r\n","import React from \"react\";\r\nimport \"./Playlists2.css\";\r\n\r\nclass Playlists2 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.deletePlaylist = this.deletePlaylist.bind(this);\r\n    this.showDelete = this.showDelete.bind(this);\r\n    this.goBack = this.goBack.bind(this);\r\n  }\r\n\r\n  deletePlaylist() {\r\n    this.props.delete(this.props.playlistId);\r\n  }\r\n\r\n  showDelete(event) {\r\n    event.target.style = \"display:none\";\r\n    event.target.previousSibling.style = \"display: flex;\";\r\n    event.target.nextSibling.style = \"display: flex\";\r\n  }\r\n\r\n  goBack(event) {\r\n    event.target.style = \"display:none\";\r\n    event.target.previousSibling.style = \"display: flex\";\r\n    event.target.previousSibling.previousSibling.style = \"display: none\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.playlists.map((playlist, i) => {\r\n          if (i === 0) {\r\n            return (\r\n              <div key={playlist[0] + 1} className=\"playDiv\">\r\n                <h2 key={playlist[0] + 2} className=\"playlistNames\">\r\n                  {playlist[0]}\r\n                </h2>\r\n                <button\r\n                  key={playlist[0] + 3}\r\n                  className=\"fdBut\"\r\n                  id=\"fdbut\"\r\n                  onClick={this.deletePlaylist}\r\n                >\r\n                  Delete\r\n                </button>\r\n                <button\r\n                  key={playlist[0] + 4}\r\n                  className=\"dBut\"\r\n                  onClick={this.showDelete}\r\n                >\r\n                  -\r\n                </button>\r\n                <button className=\"bBut\" onClick={this.goBack}>\r\n                  &#10095;\r\n                </button>\r\n              </div>\r\n            );\r\n          }\r\n          return (\r\n            <ul key={this.props.playlistId} className=\"playlistTracks\">\r\n              {playlist.map((track, i) => {\r\n                return <li key={i}>{track}</li>;\r\n              })}\r\n            </ul>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlists2;\r\n","import React from \"react\";\r\nimport \"./PlaylistTracks.css\";\r\nimport Playlists2 from \"../Playlists2/Playlists2\";\r\n\r\nclass PlaylistTracks extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"playlistTracks\">\r\n        {this.props.playlists.map((playlist, i) => {\r\n          return (\r\n            <Playlists2\r\n              playlists={playlist}\r\n              delete={this.props.delete}\r\n              playlistId={playlist[0][1]}\r\n              key={i}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlaylistTracks;\r\n","import React from \"react\";\r\nimport \"./Playlists.css\";\r\nimport PlaylistTracks from \"../PlaylistTracks/PlaylistTracks\";\r\n\r\nclass Playlists extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.disPlay = this.disPlay.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.loadPlaylists();\r\n  }\r\n\r\n  disPlay(event) {\r\n    event.target.parentNode.style = \"display: none;\";\r\n    const searchresults = document.querySelector(\".SearchResults\");\r\n    const app = document.querySelector(\".App\");\r\n    const heading = document.querySelector(\"h1\");\r\n    searchresults.style = \"display: flex; \";\r\n    app.style = \"padding-left: 0\";\r\n    heading.style = \"left: 0\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"playlist\">\r\n        <button className=\"playlistBut\" onClick={this.disPlay}>\r\n          Show Results\r\n        </button>\r\n        <PlaylistTracks\r\n          playlists={this.props.playlists}\r\n          delete={this.props.delete}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlists;\r\n","import React from \"react\";\r\nimport \"./Logout.css\";\r\n\r\nclass Logout extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.logout = this.logout.bind(this);\r\n  }\r\n\r\n  logout() {\r\n    this.props.logout();\r\n  }\r\n  render() {\r\n    return (\r\n      <button className=\"logout\" onClick={this.logout}>\r\n        LOG-OUT\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Logout;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport SearchResults from \"../SearchResults/SearchResults\";\r\nimport Playlist from \"../Playlist/Playlist\";\r\nimport Spotify from \"../../util/Spotify\";\r\nimport Preview from \"../Preview/Preview\";\r\nimport Playlists from \"../Playlists/Playlists\";\r\nimport Logout from \"../Logout/Logout\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //set an initial states\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: \"playlist\",\r\n      playlistTracks: [],\r\n      playlists: [],\r\n    };\r\n    //bind the methods\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.preview = this.preview.bind(this);\r\n    this.loadPlaylist = this.loadPlaylist.bind(this);\r\n    this.forgetPlaylist = this.forgetPlaylist.bind(this);\r\n  }\r\n\r\n  //method for adding song from the search results to the user's playlist\r\n  addTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    let searchTracks = this.state.searchResults;\r\n    //check to see if song is already in playlistTracks state with track's id property\r\n    if (tracks.find((savedTrack) => savedTrack.id === track.id)) {\r\n      //if it is then end the method\r\n      return;\r\n    }\r\n    //if new then push the new song to the array\r\n    tracks.push(track);\r\n    //grab the index of selected track\r\n    let index = searchTracks.indexOf(track);\r\n    //remove the added track from the search results\r\n    searchTracks.splice(index, 1);\r\n    //update the state of the search results\r\n    this.setState({ searchResults: searchTracks });\r\n    //then set the state of the playlist to the tracks array of objects\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  //method for removing song from user's playlist\r\n  removeTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    let searchTracks = this.state.searchResults;\r\n    //look through the playlistTracks for see if the song has a matching id\r\n    //if it matches the function !== is a false statement and it will be filtered out.\r\n    searchTracks.unshift(track);\r\n    tracks = tracks.filter((currentTrack) => currentTrack.id !== track.id);\r\n    //set the value of playlistTracks to the new filtered array, tracks\r\n    console.log(tracks);\r\n    this.setState({ searchResults: searchTracks });\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  //method that allows users to change the name of their playlist\r\n  updatePlaylistName(name) {\r\n    this.setState({ playlistName: name });\r\n  }\r\n\r\n  //method for generating saving user's playlist to their Spotify account\r\n  //and resets the state of playlistName and playlistTracks array\r\n  savePlaylist() {\r\n    //Spotify uses a property named uri to reference each song\r\n    //loop through these uri values with .map and save them to a variable\r\n    const trackUris = this.state.playlistTracks.map((track) => track.uri);\r\n    //pass in the savePlaylist method from Spotify.js and use a promise\r\n    //to update the state of PlaylistName and PlaylistTracks\r\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\r\n      this.setState({\r\n        playlistName: \"New Playlist\",\r\n        playlistTracks: [],\r\n      });\r\n      this.loadPlaylist();\r\n    });\r\n  }\r\n\r\n  //method that updates searchResults with the user's search results from the Spotify API\r\n  search(term) {\r\n    //pass in the search method from Spotify.js and use a promise\r\n    Spotify.search(term).then((searchResults) => {\r\n      //to update the state of searchResults' to value result of the Spotify.search promise\r\n      this.setState({ searchResults: searchResults });\r\n    });\r\n  }\r\n\r\n  //method that allows user to preview song\r\n  preview(track) {\r\n    //grab the id of selected track\r\n    let trackId = track.id;\r\n    const previewDiv = document.querySelector(\".preview\");\r\n    Spotify.previewTrack(trackId).then((previewUrl) => {\r\n      previewDiv.style = \"display:flex;\";\r\n      if (!previewUrl) {\r\n        previewDiv.innerHTML = \"<p> No preview available for this track </p>\";\r\n      } else {\r\n        previewDiv.innerHTML = `<object type=\"text/html\" data=\"${previewUrl}\" ></object>`;\r\n      }\r\n    });\r\n  }\r\n\r\n  //method that pulls up user playlists\r\n  loadPlaylist() {\r\n    Spotify.getPlaylists().then((playlists) => {\r\n      this.setState({ playlists: playlists });\r\n    });\r\n  }\r\n\r\n  //method for deleting playlists\r\n  forgetPlaylist(playlist) {\r\n    Spotify.deletePlaylist(playlist).then(() => {\r\n      this.loadPlaylist();\r\n    });\r\n  }\r\n\r\n  //Method for logout\r\n  logout() {\r\n    Spotify.logout();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"window\">\r\n        <h1>\r\n          Gr<span className=\"highlight\">oo</span>ving\r\n        </h1>\r\n        <Playlists\r\n          loadPlaylists={this.loadPlaylist}\r\n          delete={this.forgetPlaylist}\r\n          playlists={this.state.playlists}\r\n        />\r\n        <div className=\"App\">\r\n          <SearchResults\r\n            className=\"App-playlist\"\r\n            searchResults={this.state.searchResults}\r\n            onAdd={this.addTrack}\r\n            preview={this.preview}\r\n          />\r\n          <div className=\"midDiv\">\r\n            <SearchBar\r\n              onSearch={this.search}\r\n              searchTerm={this.state.searchTerm}\r\n            />\r\n            <Preview />\r\n          </div>\r\n          <Playlist\r\n            className=\"App-playlist\"\r\n            playlistName={this.state.playlistName}\r\n            playlistTracks={this.state.playlistTracks}\r\n            onRemove={this.removeTrack}\r\n            onNameChange={this.updatePlaylistName}\r\n            onSave={this.savePlaylist}\r\n          />\r\n          <Logout logout={this.logout} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}